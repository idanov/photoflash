{"name":"PhotoFlash","tagline":"PhotoFlash is a simple to use Flash webcam application, completely configurable and controllable from JavaScript","body":"# PhotoFlash\r\n\r\n## Introduction\r\n\r\nPhotoFlash is a simple to use Flash webcam application, completely configurable and controllable from JavaScript.\r\nIt supports very basic functionality such as checking for existing camera, taking a photo with or without a delay and\r\nsending it to a server-side script over an HTTP POST request as a base64-encoded JPEG image.\r\n\r\n## Usage\r\n\r\nA complete example for the usage of PhotoFlash can be found in the flash build result [here](https://github.com/idanov/photoflash/tree/master/dest).\r\n\r\nFirst, include `SWFObject`\r\n\r\n```html\r\n<head>\r\n    <!-- ... -->\r\n    <script type=\"text/javascript\" src=\"swfobject.js\"></script>\r\n    <!-- or -->\r\n    <script type=\"text/javascript\"\r\n        src=\"http://ajax.googleapis.com/ajax/libs/swfobject/2.2/swfobject.js\"></script>\r\n    <!-- ... -->\r\n<head>\r\n```\r\n\r\nThen find a suitable place in your HTML for the video preview and put a div there\r\n\r\n```html\r\n<div id=\"divToBeReplaced\">\r\n    <h1>No flash player installed</h1>\r\n    <p><a href=\"http://www.adobe.com/go/getflashplayer\">\r\n    <img src=\"http://www.adobe.com/images/shared/download_buttons/get_flash_player.gif\"\r\n                alt=\"Get Adobe Flash player\"/>\r\n    </a>\r\n    </p>\r\n</div>\r\n```\r\n\r\nDefine a helper function to access the flash object from JavaScript\r\n\r\n```javascript\r\nfunction getFlashMovieObject(movieName) {\r\n    if (window.document[movieName]) {\r\n        return window.document[movieName];\r\n    }\r\n    if (navigator.appName.indexOf(\"Microsoft Internet\") == -1) {\r\n        if (document.embeds && document.embeds[movieName])\r\n            return document.embeds[movieName];\r\n    }\r\n    else {\r\n        return document.getElementById(movieName);\r\n    }\r\n}\r\n```\r\n\r\nand a callback function\r\n\r\n```javascript\r\nfunction fnCallback(fn, type, txt) {\r\n    console.log(fn + \": \" + type + \", \" + txt);\r\n}\r\n```\r\n\r\nSet flashvars, flash object params and attributes\r\n\r\n```javascript\r\n// Flashvars are explained later\r\nvar flashvars = {\r\n    sandboxGuide: \"pic.jpg\",\r\n    uploadPreloader: \"preLoader.swf\",\r\n    countDown: \"preLoader.swf\",\r\n    shotDelay: 3000,\r\n    callback: \"fnCallback\",\r\n    uploadUrl: \"upload.php\",\r\n    autoActivate: \"true\",\r\n    camWidth: 640,\r\n    camHeight: 480,\r\n    camFPS: 30,\r\n    camQuality: 100\r\n};\r\n\r\nvar params = {\r\n    quality: \"high\", // set the flash movie quality to high\r\n    menu: \"true\", // that will enable the right-click menu on the flash object\r\n    allowScriptAccess: \"always\" // this enables JavaScript-to-Flash communication\r\n};\r\n\r\nvar attributes = {\r\n    id: \"movieName\",\r\n    name: \"movieName\"\r\n};\r\n```\r\n\r\nFinally, embed the flash object by using `SWFObject`\r\n\r\n```javascript\r\nswfobject.embedSWF(\"photoflash.swf\", // specify the path to the PhotoFlash .swf file\r\n                \"divToBeReplaced\", // specify the id of the HTML element to be replaced\r\n                \"640\", \"480\", // set the size of the preview canvas, in pixels\r\n                \"11.1.0\", // set the target flash player version and\r\n                \"expressInstall.swf\", // set the path to the flash installer .swf file\r\n                flashvars, params, attributes);\r\n\r\n```\r\n\r\nAfter following these steps, PhotoFlash is ready to be used\r\n\r\n```javascript\r\ngetFlashMovieObject('movieName').takeNow();\r\n```\r\n\r\n## API Reference\r\n\r\nThe app is controlled by setting flashvars and calling the exposed JavaScript methods. Here you can find explanation of \r\nall available parameters and methods. \r\n\r\n#### Flashvars\r\n\r\nSetting the flashvars controls the initial setup of the application\r\n\r\n- `sandboxGuide` - specifies a path to an image file (`.jpg`, `.png`) to be shown as a helping guide below the flash \r\nsecurity sandbox when open *(default: empty)* \r\n- `uploadPreloader` - specifies a path to a `.swf` animation shown in the center of the preview canvas as a preloader,\r\n when uploading the taken photo *(default: empty)*\r\n- `countDown` - specifies a path to a `.swf` animation used as a canvas centered countdown when waiting for the photo to be taken *(default: empty)*\r\n- `shotDelay` - sets the delay in *ms* for taking a photo, when `takePhoto()` is called; this might need to be equal to\r\n the countdown animation duration *(default: 3000)*\r\n- `callback` - a string specifying the name of a JavaScript function to be called in case of a series of events *(default: empty)*;\r\n the javascript function should have the form `callbackFn(event, typeName, data)`, where `event` could be one of the following:\r\n    - `after_reset` - fired after preview is reset\r\n    - `after_take` - fired after photo is taken\r\n    - `http_status` - fired on receiving the HTTP status code; `data` contains the HTTP status\r\n    - `error` - fired on upload error and additional information for the error is available in `typeName` and `data`\r\n    - `upload` - fired on successful upload; `typeName` contains the flash event type and `data` is the text feedback from the POST request\r\n- `uploadUrl` - url where the POST request should be sent; image data is sent as a POST variable `imageData`,\r\n which is a base64-encoded jpeg byte stream *(default: \"upload.php\")*\r\n- `autoActivate` - active the camera on load, if set to `true` *(default: false)*\r\n- `camWidth` - horizontal camera resolution; this will be the width of the uploaded photo, if supported by camera *(default: 640)*\r\n- `camHeight` - vertical camera resolution; this will be the width of the uploaded photo, if supported by camera *(default: 480)*\r\n- `camFPS` - sets the framerate for the video preview *(default: 30)*\r\n- `camBandwidth` - sets the max bandwidth of the video preview in *bytes/s*, 0 is unlimited; not very relevant for photos *(default: 0)*\r\n- `camQuality` - sets the quality of the camera from `0` to `100` *(default: 100)*\r\n- `real` - controls whether the preview is with real or mirrored video stream from the camera *(default: false)*\r\n- `debug` - when set to `true`, some debug info is traced in the JavaScript console *(default: false)*\r\n\r\n#### JavaScript interface\r\n\r\nAll JavaScript calls are accessible by calling them as methods of the object `getFlashMovieObject('movieName')`\r\n\r\n- `.showSandBox()` - shows the flash security sandbox\r\n- `.checkCamera()` - checks whether the user has at least one connected camera\r\n- `.activateCamera()` - activate the camera; might result into showing the flash security sandbox\r\n- `.deactivateCamera()` - deactivate the camera\r\n- `.changeCameraMode(width, height, fps)` - change the camera mode to **width** by **height** resolution and **fps** framerate\r\n- `.changeCameraQuality(bandwidth, quality)` - change the bandwidth of the video stream and its quality\r\n- `.takePhoto()` - take photo with a countdown (delay)\r\n- `.takeNow()` - take photo immediately\r\n- `.sendPhoto()` - send the photo to the `uploadUrl`, set as flashvar\r\n- `.resetPhoto()` - reset the preview video canvas, after taken photo\r\n- `.useMirrorImage(mirror)` - set whether a mirrored preview should be used or not\r\n\r\n## Motivation\r\n\r\nThe project is a rework of one of my old freelance projects from 2009, created for the needs of a client. Though very useful\r\nas a black-box component, it was poorly written back then. Recently I needed it for another project, so I've decided to change\r\nit a bit and open-source it. I hope that it should be easier now to modify and/or extend it, so more people can find it useful.\r\nThis is my first open-source project and I hope that someone finds it useful.\r\n\r\n## Contributors\r\n\r\nYou are more than welcome to contribute to the project by requesting a feature or reporting a bug\r\n[here](https://github.com/idanov/photoflash/issues), [forking](https://github.com/idanov/photoflash/fork) the project\r\nand/or opening a [pull request](https://github.com/idanov/photoflash/compare) with suggested changes.\r\n\r\n#### Compilation instructions\r\n\r\nTODO\r\n\r\n## License\r\n\r\nThe classes `BitString` and `JPEGEncoder` are under *Adobe*'s license, which is included in their files.\r\nThe class `Base64` is licensed by *Jean-Philippe Auclair* under the [MIT License](http://opensource.org/licenses/MIT).\r\n`SWFObject` is released under the [MIT License](http://opensource.org/licenses/MIT).\r\nThe rest of the code is licensed by me under the [MIT License](https://github.com/idanov/photoflash/blob/master/LICENSE).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}